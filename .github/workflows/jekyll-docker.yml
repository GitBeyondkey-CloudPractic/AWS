name: Deploy Docker to EC2

on:
  push:
    branches:
      - main
  workflow_dispatch:  # This allows manual triggering of the workflow

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up SSH key for EC2 access
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

    - name: Run Docker commands on EC2
      run: |
        # SSH into the EC2 instance and run all necessary commands
        ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
           # Update and install necessary packages
           sudo apt-get update
           sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
           curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
           sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
           sudo apt-get update
           sudo apt-get install -y docker-ce
           sudo systemctl start docker
           sudo systemctl enable docker
         
           # Verify Docker installation
           docker --version
           sudo systemctl status docker
         
           # Add ubuntu user to docker group
           sudo usermod -aG docker ubuntu
           newgrp docker  # Refresh group membership immediately
         
           # Verify Docker group permissions
           groups ubuntu
           
           # Ensure docker is working properly by listing images and containers
           sudo docker ps -a
           sudo docker images

           # Clone repository if not exists or update if exists
           if [ -d "aws-pipeline" ]; then
             cd aws-pipeline && git pull
           else
             git clone https://github.com/aamirshaikh3/aws-pipeline.git
             cd aws-pipeline
           fi
         
           # Create Dockerfile
           cat > Dockerfile << 'DOCKERFILE'
                FROM nginx:alpine
                COPY contact.html /usr/share/nginx/html/contact.html  # Ensure contact.html is in the right location
                EXPOSE 80
                DOCKERFILE
         
           # Build the Docker image
           sudo docker build -t my-nginx-image .
         
           # Stop and remove the existing container (if any)
           sudo docker stop my-container || true
           sudo docker rm my-container || true
         
           # Run the Docker container
           sudo docker run -d -p 80:80 --name my-container my-nginx-image
           
           # Ensure the container is running
           sudo docker ps -a
           sudo docker logs my-container
         EOF
